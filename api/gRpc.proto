syntax = "proto3";

option csharp_namespace = "Vkontakte.Messaging";

package vkontakte;

service User {
    rpc GetFriends (UserModelPagingRequest) returns (repeated UserModel);
    rpc AddFriend (UserModelRequest) returns (EmptyResponse);
    rpc DeleteFriend (DeleteFriendRequest) returns (EmptyResponse);
    rpc GetDialogs (UserModelPagingRequest) returns (DialogModel);
    rpc CreateDialog (UserModelRequest) returns (DialogModel);
    rpc GetDialog (DialogModelRequest) returns (DialogModel);
    rpc SentToDialog (DialogModel) returns (EmptyResponse);
}

message UserModelPagingRequest {
    string userId = 1;
    int32 offset = 2;
    int32 limit = 3;
}

message UserModelRequest {
    string userId = 1;
}

message UserModel {
    string userId = 1;
    string username = 2;
    string firstName = 3;
    string lastName = 4;
    string email = 5;
    string phone = 6;
    bool userOnline = 7;
}

message EmptyResponse {}

message DeleteFriendRequest {
    string userId = 1;
    string friendId = 2;
}

message DialogModel {
    string userId = 1;
    message Dialog {
        string dialogId = 1;
        repeated string text = 2;
    }
    repeated Dialog dialog = 2;
}

message DialogModelRequest {
    string userId = 1;
    string dialogId = 2;
}

service Community {
    rpc GetCommunities (UserModelRequest) returns (CommunityModel);
    rpc EnterCommunity (CommunityModelRequest) returns (EmptyResponse);
    rpc LeaveCommunity (CommunityModelRequest) returns (EmptyResponse);
}

message CommunityModel {
    string userId = 1;
    message Community {
        string communityId = 1;
        string name = 2;
    }
    repeated Community community = 2;
}

message CommunityModelRequest {
    string userId = 1;
    string communityId = 2;  
}

service Profile {
    rpc GetProfile (UserModelRequest) returns (ProfileModel);
}

message ProfileModel {
    string userId = 1;
    string username = 2;
    string firstName = 3;
    string lastName = 4;
    string email = 5;
    string phone = 6;
    string sex = 7;
    int32 height = 8;
    int32 weight = 9;
}

service Feed {
    rpc GetFeed (UserModelRequest) returns (FeedModel);
    rpc AddFeed (UserModelRequest) returns (EmptyResponse);
}

message FeedModel {
    string userId = 1;
    repeated string text = 2;
}

service Chat{
    rpc GetChats (UserModelRequest) returns (ChatModelRepeated);
    rpc AddPost (ChatModel) returns (EmptyResponse);
    rpc GetChat (ChatModelRequest) returns (ChatModel);
    rpc SentToChat (ChatModel) returns (EmptyResponse);
}

message ChatModelRepeated {
    string userId = 1;
    message Chat {
        string chatId = 1;
        repeated string text = 2;
    }
    repeated Chat chat = 2;
}

message ChatModel {
    string userId = 1;
    message Chat {
        string chatId = 1;
        repeated string text = 2;
    }
    Chat chat = 2;
}

message ChatModelRequest {
    string userId = 1;
    string chatId = 2;
}